$(() => {


  if (window.location.href.indexOf("editMode/1") > -1) return;

  const calenderBlock = $('#calendar');

  if (calenderBlock.length === 0) return;


  const calendar_params = {
    currentPage: {
      enable: false,
      selector: ".current-page-events",
      separator: '\n'
    },

    otherPage: {
      enable: true,
      selector: ".other-page-content p",
      separator: ';',
      pageUrl: "/qa_calendar"
    },
  }



  const calenderTpl = `
  <div id="calTitle">
        <div id="calTitle_month">
        <button type="button" class="month-mover prev month-mover_disabled" data-month="Мар">
        <svg width="21" height="8" viewBox="0 0 21 8" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M0.646447 3.64645C0.451184 3.84171 0.451184 4.15829 0.646447 4.35355L3.82843 7.53553C4.02369 7.7308 4.34027 7.7308 4.53553 7.53553C4.7308 7.34027 4.7308 7.02369 4.53553 6.82843L1.70711 4L4.53553 1.17157C4.7308 0.976311 4.7308 0.659728 4.53553 0.464466C4.34027 0.269204 4.02369 0.269204 3.82843 0.464466L0.646447 3.64645ZM1 4.5H21V3.5H1V4.5Z" fill="white"></path>
        </svg>
        
        </button>
        <div id="monthYear">10 <span class="current-month">Мар</span><span>марта</span><br><span class="current-day">воскресенье</span></div>
        <button type="button" class="month-mover next month-mover_disabled" data-month="Мар">
        <svg width="21" height="8" viewBox="0 0 21 8" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M20.3536 4.35355C20.5488 4.15829 20.5488 3.84171 20.3536 3.64645L17.1716 0.464466C16.9763 0.269204 16.6597 0.269204 16.4645 0.464466C16.2692 0.659728 16.2692 0.976311 16.4645 1.17157L19.2929 4L16.4645 6.82843C16.2692 7.02369 16.2692 7.34027 16.4645 7.53553C16.6597 7.7308 16.9763 7.7308 17.1716 7.53553L20.3536 4.35355ZM0 4.5H20V3.5H0V4.5Z" fill="white"></path>
        </svg>
        
        </button>
        </div>
  </div>
  <div id="full_calender">
    <div id="calThead"></div>
    <div id="calTbody"></div>
  </div>
  <div id="calTFooter_event">
    <h3 id="eventTitle_today"></h3>
    <div id="calTFooter">
      <h3 id="eventTitle"></h3>
      <a href="javascript:void(0);" id="calLink">Все события</a>
    </div>
  </div>
`;

  const weekDaysFromSunday = '<div>S</div><div>M</div><div>T</div><div>W</div><div>T</div><div>F</div><div>S</div>';

  const weekDaysFromMonday = '<div>Пн</div><div>Вт</div><div>Ср</div><div>Чт</div><div>Пт</div><div>Сб</div><div>Вс</div>';

  const shortMonths = ["Янв", "Фев", "Мар", "Апр", "Май", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек"];


  const fullMonths = ["января", "февраля", "марта", "апреля", "мая", "июня", "июля", "августа", "сентября", "октября", "ноября", "декабря"];


  const fullMonths_names = ["январь", "февраль", "март", "апрель", "май", "июнь", "июль", "август", "сентябрь", "октябрь", "ноябрь", "декабрь"];


  const weekDays = ["воскресенье", "понедельник", "вторник", "среда", "четверг", "пятница", "суббота"];


  let courseMonths = [];


  let dates = [];


  $.fn.MEC = function (options) {

    var settings = $.extend({
      calendar_link: "/",
      events: [],
      from_monday: true,
      onMonthChanged: null
    }, options);


    const miniCalendar = this;

    miniCalendar.addClass('mini-cal').html(calenderTpl);

    const thead = miniCalendar.find("#calThead");
    const tbody = miniCalendar.find("#calTbody");
    const calTitle = miniCalendar.find("#monthYear");
    const calFooter = miniCalendar.find("#calTFooter");
    const eventTitle = miniCalendar.find("#eventTitle");
    const eventTitle_today = miniCalendar.find("#eventTitle_today");

    // ? Не нужный блок, потому что футер перерендеривается без этого элемента
    const eventsLink = miniCalendar.find("#calLink");

    const today = new Date();

    let curMonth = today.getMonth();
    let curYear = today.getFullYear();

    eventTitle.text("No events today.");
    eventsLink.text("Все события");
    eventsLink.attr("href", settings.calendar_link);

    if (settings.from_monday) {
      thead.html(weekDaysFromMonday);
    } else {
      thead.html(weekDaysFromSunday);
    }




    if (!settings.calendar_link.length && !settings.events.length) {
      calFooter.css("display", "none");
    }



    miniCalendar.find(".month-mover").each(function () {

      const $mover = $(this);

      // ? Почему bind
      $mover.bind("click", function (e) {
        e.preventDefault();

        if ($mover.hasClass('month-mover_disabled')) return;

        if ($mover.hasClass("next")) {
          viewNextMonth();
        } else if ($mover.hasClass("prev")) {
          viewPrevMonth();
        }

      });
    });

    miniCalendar.on("click touchstart", ".a-date", function (e) {

      e.preventDefault();

      $(".a-date").removeClass('focused');


      if ($(this).hasClass('blurred')) return;

      showEvent($(this).data('event'));

      $(this).focus();
      $(this).addClass('focused');


      calThisMonth = $('.current-month').text();

      calThisDay = $('.focused').text();

      const chooseDay = Number(calThisDay);

      const chooseMonth = shortMonths.indexOf(calThisMonth);

      const chooseDate = new Date(curYear, chooseMonth, chooseDay);

      const chooseWeekDay = chooseDate.getDay();


      calTitle.html(calThisDay + " <span class='current-month'>" + calThisMonth + "</span><span>" + fullMonths[chooseMonth] + "</span>" + "<br/><span class='current-day'>" + weekDays[chooseWeekDay] + "</span> ");


    });


    function populateCalendar(month, year, onInit) {

      curMonth = month;

      curYear = year;

      var ldate = new Date(year, month);


      var dt = new Date(ldate);

      var weekDay = dt.getDay();



      tbody.html("");

      eventTitle.text("");

      eventsLink.text("Все события");
      eventsLink.attr("href", "#");

      if (settings.from_monday) {
        weekDay = dt.getDay() > 0 ? dt.getDay() - 1 : 6;
      }


      if (ldate.getDate() === 1) {
        tbody.append(lastDaysOfPrevMonth(weekDay));

      }


      while (ldate.getMonth() === month) {
        dt = new Date(ldate);
        var isToday = areSameDate(ldate, new Date());
        var event = null;
        let dayEvents = [];

        settings.events.forEach(function (item, index) {

          if (areSameDate(dt, new Date(item.date))) {

            dayEvents.push(index);

          }
        });

        var eventIndex = settings.events.findIndex(function (ev) {
          return areSameDate(dt, new Date(ev.date));
        });



        const arrEvent = [];

        if (eventIndex != -1) {

          dayEvents.forEach(function (item) {
            arrEvent.push(settings.events[item]);
          });

        }

        if (onInit && isToday) {
          showEvent(arrEvent);
        }

        tbody.append(dateTpl(false, ldate.getDate(), isToday, arrEvent, onInit && isToday));


        ldate.setDate(ldate.getDate() + 1);

        const bufferDays = 43 - miniCalendar.find(".a-date").length;

        if (ldate.getMonth() != month) {
          for (let i = 1; i < bufferDays; i++) {
            tbody.append(dateTpl(true, i));
          }
        }
      }

      if (settings.onMonthChanged) {
        settings.onMonthChanged(month, year);
      }

      let userDate = new Date();
      let todayDay = userDate.getDate();
      let chooseWeekDay = userDate.getDay();


      if ($('.a-date.current').length > 0) {
        $('.a-date.current').addClass('focused');
        calTitle.html(todayDay + " <span class='current-month'>" + shortMonths[month] + "</span><span>" + fullMonths[month] + "</span>" + "<br/><span class='current-day'>" + weekDays[chooseWeekDay] + "</span>");
      } else if ($('.a-date.focused').length > 0) {
        calTitle.html("<span class='current-day'>" + weekDays[chooseWeekDay] + "</span>, " + $('.a-date.focused').text() + " <span class='current-month'>" + shortMonths[month] + "</span><span>" + fullMonths[month] + "</span>");
      } else {
        calTitle.html("<span class='current-month'>" + shortMonths[month] + "</span><span>" + fullMonths_names[month] + "</span>");
      }


      checkArrowState(courseMonths);



    }

    function lastDaysOfPrevMonth(weekDay) {
      if (curMonth > 0) {
        var monthIdx = curMonth - 1;
        var yearIdx = curYear;
      } else {
        var monthIdx = 11;
        var yearIdx = curYear - 1;
      }

      const prevMonth = getMonthDays(monthIdx, yearIdx);

      let lastDays = "";
      for (let i = weekDay; i > 0; i--) {
        lastDays += dateTpl(true, prevMonth[prevMonth.length - i]);
      }


      return lastDays;
    }


    function dateTpl(blurred, date, isToday, event, isSelected) {


      let tpl = "<div class='a-date blurred'><span>" + date + "</span></div>";

      if (blurred) return tpl;

      let clazzes = "";
      if (event.length > 0 && event !== null) {
        clazzes = "event ";
        clazzes += isToday ? "current " : "";
      }

      tpl = "<button type='button' class='a-date " + clazzes + "' data-event='" + JSON.stringify(event) + "' data-span=''><span>" + date + "</span></button>";

      return tpl;
    }


    function showEvent(event) {

      const $calTFooter = $('#calTFooter');

      let eventHTML = '';

      if (event.length > 0) {

        event.sort(function (a, b) {

          return new Date(a.date).getTime() - new Date(b.date).getTime()
        })


        event.forEach(function (item) {
          eventHTML += `<a href="${item.link}" class="day-event-item"><h3 class="eventTitle"><span class="eventTimes">${item.times}</span><span class="eventTitle">${item.title}</span></h3></a>`;
        });

        eventTitle_today.text("События в этот день");

      } else {

        eventTitle_today.text("События в этот день");
        eventHTML = `<div class="day-event-item"><h3 class="eventTitle">Нет событий в этот день</h3></div>`;
        eventsLink.attr("href", settings.calendar_link);

      }

      $calTFooter.html(eventHTML);

    }


    // Функция Показать следующий месяц
    function viewNextMonth() {
      const nextMonth = curMonth < 11 ? curMonth + 1 : 0;
      const nextYear = curMonth < 11 ? curYear : curYear + 1;

      populateCalendar(nextMonth, nextYear);
    }


    // Функция Показать предыдущий месяц
    function viewPrevMonth() {
      const prevMonth = curMonth > 0 ? curMonth - 1 : 11;
      const prevYear = curMonth > 0 ? curYear : curYear - 1;

      populateCalendar(prevMonth, prevYear);
    }


    function areSameDate(d1, d2) {
      return d1.getFullYear() == d2.getFullYear() &&
        d1.getMonth() == d2.getMonth() &&
        d1.getDate() == d2.getDate();
    }

    function getMonthDays(month, year) {
      var date = new Date(year, month, 1);
      var days = [];

      while (date.getMonth() === month) {
        days.push(date.getDate());
        date.setDate(date.getDate() + 1);
      }

      return days;
    }

    populateCalendar(curMonth, curYear, true);

    return miniCalendar;
  };

  JSinjection('https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.0/moment.min.js', function () {
    JSinjection('https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.0/locale/ru.min.js', function () {
      JSinjection('https://cdnjs.cloudflare.com/ajax/libs/moment-timezone/0.5.23/moment-timezone-with-data-2012-2022.min.js', function () {


        moment.fn.fromString = function (param, value) {
          if (param === 'завтра') return this.clone().add(1, 'day');
          else if (param === 'вчера') return this.clone().subtract(1, 'day');
          else if (param === 'минут назад') return this.clone().subtract(value, 'minutes');
          return this;
        }


        function parseHumanReadableDate(timestring) {

          let time, minutes;

          if (/вчера \d\d:\d\d/.test(timestring)) {
            time = /\d\d:\d\d/.exec(timestring)[0];
            return moment(time, "HH:mm").fromString('вчера');
          } else if (/вчера/.test(timestring)) {
            return moment("00:00", "HH:mm").fromString('вчера');
          } else if (/завтра \d\d:\d\d/.test(timestring)) {
            time = /\d\d:\d\d/.exec(timestring)[0];
            return moment(time, "HH:mm").fromString('завтра');
          } else if (/завтра/.test(timestring)) {
            return moment("00:00", "HH:mm").fromString('завтра');
          } else if (/сегодня \d\d:\d\d/.test(timestring)) {
            time = /\d\d:\d\d/.exec(timestring)[0];
            return moment(time, "HH:mm");
          } else if (/сегодня/.test(timestring)) {
            return moment("00:00", "HH:mm");
          } else if (/\d{1,2} минут[ыу]? назад/.test(timestring)) {
            minutes = /\d{1,2}/.exec(timestring)[0];
            return moment().fromString('минут назад', minutes);
          } else if (/только что/.test(timestring)) {
            return moment().subtract(1, 'minutes');
          } else {
            let m_date = moment(timestring, 'dd D MMM HH:mm');
            if (m_date.format() != 'Invalid date') {
              return m_date;
            } else {
              return moment(timestring, 'dd D MMM YYYY');
            }
          }


        }


        $(document).on('click', '.month-mover', function () {
          addClassToEvent()
        });

        function addClassToEvent() {

          $('button.a-date').each(function () {

            if ($(this).data('event') === null) return;

            const event = $(this).data('event');
            for (key in event[0]) {
              if (key === "class") {
                $(this).addClass(event[0][key]);
              }
            }


          });
        }



        function addDatesFromLesssons($lesssons, className) {

          $lesssons.each((_, lesson) => {

            const $dateEl = $(lesson).find('.user-state-label.lesson-date');
            if (!$dateEl.length) return;

            const lessonTitle = $(lesson).find('.link.title')[0].childNodes[0].textContent.trim();

            const lessonDateText = $dateEl.text().replace("Дата и время начала", "").replace("Недоступен до", "").replace("Дата начала", "").trim();

            const momentDate = parseHumanReadableDate(lessonDateText);

            const lessonDate = momentDate.toDate();
            const lessonDateTime = momentDate.format('HH:mm');
            const lessonLink = $(lesson).find('.item-main-td .link.title').attr('href');

            dates.push({
              title: lessonTitle,
              times: lessonDateTime,
              date: lessonDate,
              link: lessonLink,
              class: className,
            });

          });

        }


        if (calendar_params.currentPage.enable) {
          // Берем события из допполя
          getCustomEventsStr($(calendar_params.currentPage.selector), calendar_params.currentPage.separator);
        }


        function getCustomEventsStr(eventsBlock, separator = ";") {

          const eventsStr = eventsBlock.text().trim();

          if (eventsStr === '') return;

          const eventsArr = eventsStr.split(separator);


          eventsArr.forEach(function (item) {

            if (item) {
              const event = item.split(',');
              const pageEventTitle = event[2];
              const pageEventLink = event[3];
              const pageEventDateText = event[0].split('.');
              const pageEventDay = Number(pageEventDateText[0]);
              const pageEventMonth = Number(pageEventDateText[1]) - 1;
              const pageEventYear = Number(pageEventDateText[2]);
              const pageEventDate = new Date(pageEventYear, pageEventMonth, pageEventDay);
              const timeEvent = event[1];


              const timeArr = timeEvent.split(":");
              pageEventDate.setHours(timeArr[0], timeArr[1]);

              dates.push({
                title: pageEventTitle,
                date: pageEventDate,
                times: timeEvent,
                link: pageEventLink,
                class: "other-page"
              });
            }


          });


          showCelendar();
        }


        if (calendar_params.otherPage.enable) {

          // Берем события из страницы
          getEventsFromPage(calendar_params.otherPage.pageUrl, calendar_params.otherPage.selector, calendar_params.otherPage.separator);

        }

        function getEventsFromPage(url, eventsBlockSelector, separator = ";") {

          $.get(url, (data) => {

            const pageHtml = $('<div></div>').html(data);

            const pageEventsDataBlock = pageHtml.find(eventsBlockSelector);

            if (pageEventsDataBlock.length === 0) return;

            getCustomEventsStr(pageEventsDataBlock, separator);

          });

        }


        (function () {
          let classes = calenderBlock.attr('class').split(/\s+/);
          let trainingID = null;


          $.each(classes, (_, one_class) => {
            if (one_class.indexOf('training') > -1) {
              trainingID = one_class.replace(/\D+/g, '');
            }
          });


          function parseLessons(href) {


            $.get(href, function (data) {

              const pageHtml = $('<div></div>').html(data);

              const $lessons = pageHtml.find('.lesson-list li:not(.divider)');

              if ($lessons.length) {
                addDatesFromLesssons($lessons, 'sublesson');
              }


              const training = pageHtml.find('.stream-table tr a');

              if (training.length) {
                training.each(function () {
                  parseLessons($(this).attr("href"));
                });
              } else {
                showCelendar();
              }

            });


          }


          if (trainingID) {
            parseLessons('/teach/control/stream/view/id/' + trainingID);
          } else {
            parseLessons('/teach/control/');
          }
        })();




        function showCelendar() {


          dates.forEach(function (item) {

            for (let learn in item) {

              if (learn == "date") {
                const learnDate = new Date(item[learn]);
                const monthNum = learnDate.getMonth();

                if (!isNaN(monthNum) && !courseMonths.includes(monthNum)) {
                  courseMonths.push(monthNum);
                }

              }

            }


          });


          calenderBlock.MEC({
            from_monday: true,
            events: dates
          });


          setTimeout(() => {
            addClassToEvent();
          });

        }
      })
    })
  });

  setTimeout(() => {

    checkArrowState(courseMonths);

  }, 3000);



  function checkArrowState(courseMonths) {


    const firstMonth = shortMonths[Math.min.apply(null, courseMonths)];
    const lastMonth = shortMonths[Math.max.apply(null, courseMonths)];

    const currMonth = $('.current-month');

    const arrowPrev = $('.month-mover.prev');
    const arrowNext = $('.month-mover.next');

    const disableArrowClass = 'month-mover_disabled';




    arrowPrev.attr('data-month', firstMonth);

    arrowNext.attr('data-month', lastMonth);



    if (currMonth.text() == firstMonth) {
      arrowPrev.addClass(disableArrowClass);
    } else {
      arrowPrev.removeClass(disableArrowClass);
    }

    if (currMonth.text() == lastMonth) {
      arrowNext.addClass(disableArrowClass);
    } else {
      arrowNext.removeClass(disableArrowClass);
    }
  }


  // Функция для подключение скриптов
  function JSinjection(fileName, callback) {
    var script = document.createElement("script")
    script.type = "text/javascript";
    if (script.readyState) { // only required for IE <9
      script.onreadystatechange = function () {
        if (script.readyState === "loaded" || script.readyState === "complete") {
          script.onreadystatechange = null;
          callback();
        }
      };
    } else { //Others
      script.onload = function () {
        callback();
      };
    }
    script.src = fileName;
    document.getElementsByTagName("head")[0].appendChild(script);
  }

});